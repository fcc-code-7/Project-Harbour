@model FYP.Web.ViewModels.NotificationsViewModel


@{
    int counter = 0;
    var isCoordinator = User.IsInRole("Cordinator") ? "true" : "false";

}

<!-- BEGIN: Content-->
<div class="app-content content">
    <input type="hidden" id="isCoordinator" value="@isCoordinator" />
    <div class="content-overlay"></div>
    <div class="content-wrapper">
        <div class="content-header row">
        </div>
        <div class="content-body ">
            <section class="users-list-wrapper">
                <div class="users-list-filter px-1">
                    <!-- Section 1 -->
                    <div class=" ">
                        <div class="p-3 bg-white text-black rounded-lg " style="height:80vh ; min-height:80vh">

                            <!-- Column 1: -->
                            <div class="" style="min-height:100px;">
                                <div class="w-full grid sm:grid-cols-1 lg:grid-cols-2 gap-4 ">
                                    <div class=" text-2xl font-bold mb-1">
                                        <h1>
                                            Messages
                                        </h1>
                                    </div>

                                </div>
                                @if (User.IsInRole("Cordinator"))
                                {

                                    <div class="flex flex-wrap items-center justify-between w-full space-y-2 sm:space-y-0">
                                        <!-- Compose Button -->
                                        <button type="button" id="ComposeMessage"
                                                class="text-white bg-gradient-to-r from-blue-500 via-blue-600 to-blue-700 hover:bg-gradient-to-br
               focus:ring-4 focus:outline-none focus:ring-blue-300 dark:focus:ring-blue-800
               font-medium rounded-lg text-sm px-3 py-2.5 text-center">
                                            <i class="fas fa-pencil-alt"></i>
                                            Compose
                                        </button>

                                        <!-- Search Bar -->
                                        <form class="flex items-center max-w-sm w-full sm:w-auto" id="search-form">
                                            <label for="simple-search" class="sr-only">Search</label>
                                            <div class="relative w-full">
                                                
                                                <input type="text" id="simple-search"
                                                       class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500
                       block w-full ps-10 p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400
                       dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                                                       placeholder="Search Message..." required />
                                            </div>
                                            <button type="submit"
                                                    class="p-2.5 ms-2 text-sm font-medium text-white bg-blue-700 rounded-lg border border-blue-700
                   hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600
                   dark:hover:bg-blue-700 dark:focus:ring-blue-800">
                                                <svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20">
                                                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z" />
                                                </svg>
                                                <span class="sr-only">Search</span>
                                            </button>
                                        </form>
                                    </div>


                                }
                                @if (User.IsInRole("Student") || User.IsInRole("Supervisor"))
                                {
                                    <!-- Search Bar -->
                                    <form class="flex items-center w-full sm:w-auto" id="search-form">
                                        <label for="simple-search" class="sr-only">Search</label>
                                        <div class="relative w-full">

                                            <input type="text" id="simple-search"
                                                   class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500
                       block w-full ps-10 p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400
                       dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                                                   placeholder="Search Message..." required />
                                        </div>
                                        <button type="submit"
                                                class="p-2.5 ms-2 text-sm font-medium text-white bg-blue-700 rounded-lg border border-blue-700
                   hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600
                   dark:hover:bg-blue-700 dark:focus:ring-blue-800">
                                            <svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20">
                                                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z" />
                                            </svg>
                                            <span class="sr-only">Search</span>
                                        </button>
                                    </form>
                                }

                                <div class="table-responsive">
                                    <table class="table">
                                        <thead>
                                            <tr>
                                                <th style="width: 5%;">S.No</th> <!-- Small width for S.No -->
                                                @if (User.IsInRole("Cordinator"))
                                                {
                                                    <th style="width: 80%;">Messages</th> <!-- Larger width for Messages -->
                                                }else{

                                                    <th style="width: 85%;">Messages</th> <!-- Larger width for Messages -->
                                                }
                                                @if (User.IsInRole("Cordinator"))
                                                {
                                                    <th class="text-end" style="width: 15%;">Date</th> <!-- Small width for Date -->
                                                    <th class="text-end" style="width: 5%;">Action</th> <!-- Small width for Date -->
                                                }
                                                else
                                                {
                                                    <th class="text-end" style="width: 15%;">Date</th> <!-- Small width for Date -->
                                                }
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @if (Model.NotificationsViewModels == null || Model.NotificationsViewModels.Count() == 0)
                                            {
                                                <tr>
                                                    <td colspan="4" class="text-center text-muted py-3">
                                                        No messages found in your inbox.
                                                    </td>
                                                </tr>
                                            }
                                            else
                                            {
                                                @foreach (var item in Model.NotificationsViewModels)
                                                {
                                                    <tr >
                                                        <td data-id="@item.Id" class="message-row">@(counter = counter + 1)</td>
                                                        <td data-id="@item.Id" class="text-truncate message-row" style="max-width: 400px;">
                                                            <span data-id="@item.Id" class="d-block text-dark fw-bold message-row">@item.Subject</span>
                                                            <span data-id="@item.Id" class="d-block text-muted small message-row">@item.Message</span>
                                                        </td>
                                                        <td class="text-end small text-muted">@item.Date</td>
                                                        @if (User.IsInRole("Cordinator"))
                                                        {

                                                            <td class="text-end small text-muted text-center" >
                                                                <i class="fas fa-trash" id="DeleteMessage" data-id="@item.Id" data-bs-toggle="modal" data-bs-target="#deleteModal"></i>
                                                            </td>
                                                        }
                                                    </tr>
                                                }


                                            }
                                        </tbody>
                                    </table>
                                </div>

                            </div>
                        </div>
                    </div>

                </div>
            </section>
        </div>
    </div>
<div class="modal fade" id="deleteModalmESSAGE" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this message?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="confirmDeleteBtnModal">Delete</button>
            </div>
        </div>
    </div>
</div>
</div>

<script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
<script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>

<style>
    /* Default styles for larger screens */
    .table-responsive {
        max-height: 340px !important; /* Set a maximum height for the table container */
        overflow-y: auto !important; /* Enable vertical scrolling when content overflows */
    }

    .table thead {
        position: sticky !important;
        top: 0 !important; /* Stick the header to the top of the container */
        background-color: #fff !important; /* Optional: Set a background color to make the header stand out */
        z-index: 1 !important; /* Ensure the header stays above the table body */
    }

    .table td, .table th {
        white-space: nowrap !important; /* Prevent text from wrapping inside cells */
        text-overflow: ellipsis !important; /* Add ellipsis for overflowing text */
        overflow: hidden !important;
    }

    /* For small screens (max-width 768px or adjust based on your needs) */
    @@media (max-width: 768px) {
        .table-responsive {
            max-height: 500px !important; /* Set a maximum height for the table container */
            overflow-y: auto !important; /* Enable vertical scrolling when content overflows */
        }

        .table thead {
            position: sticky !important;
            top: 0 !important; /* Stick the header to the top of the container */
            background-color: #fff !important; /* Optional: Set a background color to make the header stand out */
            z-index: 1 !important; /* Ensure the header stays above the table body */
        }

        .table td, .table th {
            white-space: nowrap !important; /* Prevent text from wrapping inside cells */
            text-overflow: ellipsis !important; /* Add ellipsis for overflowing text */
            overflow: hidden !important;
        }
    }

    .arrow-container {
        position: relative;
        margin-bottom: 20px; /* Adjust as needed */
    }


    .noborder {
        border-color: white !important;
    }



    .colorchange {
        transition: color 0.3s ease;
        cursor: default;
    }

        .colorchange:hover {
            color: green;
            cursor: pointer;
        }

    .card-margin {
        margin-bottom: 1.875rem !important;
    }

    .card {
        border: 0 !important;
        box-shadow: 0px 0px 10px 0px rgba(82, 63, 105, 0.1) !important;
        -webkit-box-shadow: 0px 0px 10px 0px rgba(82, 63, 105, 0.1) !important;
        -moz-box-shadow: 0px 0px 10px 0px rgba(82, 63, 105, 0.1) !important;
        -ms-box-shadow: 0px 0px 10px 0px rgba(82, 63, 105, 0.1) !important;
        position: relative !important;
        display: flex !important;
        flex-direction: column !important;
        min-width: 0 !important;
        word-wrap: break-word !important;
        background-color: #ffffff !important;
        background-clip: border-box !important;
        border: 1px solid #3b0764 !important;
        border-radius: 8px !important;
    }

        .card .card-header.no-border {
            border: 0 !important;
        }

        .card .card-header {
            background: none !important;
            padding: 0 0.9375rem !important;
            font-weight: 500 !important;
            display: flex !important;
            align-items: center !important;
            min-height: 50px !important;
        }

    .card-header:first-child {
        border-radius: calc(8px - 1px) calc(8px - 1px) 0 0 !important;
    }

</style>
<script>
    $(document).ready(function () {
        var isCoordinator = $("#isCoordinator").val() === "true"; // Get role info from hidden input

        // Handle form submission (search)
        $(document).off("submit", "#search-form").on("submit", "#search-form", function (e) {
            e.preventDefault(); // Prevent form submission
            const query = $("#simple-search").val(); // Get the search query

            // If the search query is empty, show all messages by sending an empty query
            const data = query ? { query: query } : {}; // If query is empty, send no query parameter

            $.ajax({
                url: "/cordinator/SearchMessages",
                type: "GET",
                data: data, // Send data (either with or without the query)
                success: function (response) {
                    let tbodyHtml = "";
                    if (response.length > 0) {
                        let counter = 0;
                        response.forEach((item) => {
                            counter++;

                            tbodyHtml += `
                                    <tr>
                                        <td data-id="${item.id}" class="message-row">${counter}</td>
                                        <td data-id="${item.id}" class="text-truncate message-row" style="max-width: 400px;">
                                            <span data-id="${item.id}" class="d-block text-dark fw-bold message-row">${item.subject}</span>
                                            <span data-id="${item.id}" class="d-block text-muted small message-row">${item.message}</span>
                                        </td>
                                        <td class="text-end small text-muted">${item.date}</td>
                                        ${isCoordinator
                                    ? `<td class="text-end small text-muted text-center">
                                                    <i class="fas fa-trash" id="DeleteMessage" data-id="${item.id}" data-bs-toggle="modal" data-bs-target="#deleteModal"></i>
                                               </td>`
                                    : ""}
                                    </tr>
                                `;
                        });
                    } else {
                        tbodyHtml = `
                                <tr>
                                    <td colspan="4" class="text-center text-muted py-3">
                                        No messages found in your inbox.
                                    </td>
                                </tr>
                            `;
                    }

                    // Update the table body
                    $("table.table tbody").html(tbodyHtml);
                },
                error: function () {
                    $("table.table tbody").html(
                        `<tr>
                                <td colspan="4" class="text-center text-danger py-3">
                                    An error occurred while searching.
                                </td>
                            </tr>`
                    );
                },
            });
        });

        var Id = "";
        $(document).on('click', '#DeleteMessage', function (event) {
            event.preventDefault();
            Id = $(this).data('id');
            $('#deleteModalmESSAGE').modal('show');
        });

        // Event listener for confirmation button click (when the "Delete" button in modal is clicked)
        $('#confirmDeleteBtnModal').on('click', function (e) {
            e.preventDefault();
            $('.modal-backdrop').remove();
            showLoadingSpinner();
            $.ajax({
                url: "/cordinator/DeleteMessage",
                type: 'POST',
                data: { id: Id },
                success: function (response) {
                    hideLoadingSpinner();
                    $("#MainContainer").html(response);
                },
                error: function (xhr, status, error) {
                    alert('An error occurred while deleting the message: ' + error);
                }
            });
        });

        // When a message row is clicked, show details
        $(".message-row").click(function (event) {
            event.preventDefault();
            var messageId = $(this).data("id"); // Get the message ID
            showLoadingSpinner();

            // Send AJAX request to get the message details
            $.ajax({
                url: "/cordinator/GetMessageDetails",
                type: 'GET',
                data: { id: messageId },
                success: function (data) {
                    hideLoadingSpinner();
                    // Load the returned partial view into the container
                    $("#MainContainer").html(data);
                },
                error: function () {
                    alert("Error retrieving message details.");
                }
            });
        });

        // Example of other AJAX functionality (e.g., Compose Message)
        $(document).on('click', '#ComposeMessage', function (e) {
            e.preventDefault();
            showLoadingSpinner();
            $.ajax({
                url: "/cordinator/CreateNotifications",
                type: "GET",
                success: function (response) {
                    hideLoadingSpinner();
                    $("#MainContainer").empty();
                    $("#MainContainer").html(response);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    hideLoadingSpinner(); // Hide the loading spinner
                    console.error("Error fetching rooms:", textStatus, errorThrown);
                    alert("An error occurred while fetching the rooms. Please try again.");
                }
            });
        });
    });
</script>
